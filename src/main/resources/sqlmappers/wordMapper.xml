<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="lg.cns.ds.mapper.wordMapper">
	
	<sql id="sqlSelectList">
        SELECT
			request_id as requestId
			, request_type as requestType
			, request_status as requestStatus
			, grp1.name as requestStatusText
			, regist_status as registStatus
			, grp3.name as registStatusText
			, is_normal as isNormal
			, grp2.name as isNormalText
			, tb_word.username as username
			, users.firstname as firstname
			, created_date as createdDate
			, approved_date as approveDate
			, standard_word as standardWord
			, standard_word_eng as standardWordEng
			, abbrevation_eng as abbrevationEng
			, synonyms as synonyms
			, is_classified as isClassified
			, grp6.name as isClassifiedText
			, source as source
			, definition as definition
			, rejection_reason as rejectionReason
		FROM tb_word
		LEFT JOIN tb_common_dict AS grp1
			ON
			request_status = grp1.grp_code AND grp1.grp_id = '1'
		LEFT JOIN tb_common_dict AS grp2
			ON
			is_normal = grp2.grp_code AND grp2.grp_id = '2'
		LEFT JOIN tb_common_dict AS grp3
			ON
			regist_status = grp3.grp_code AND grp3.grp_id = '3'
		LEFT JOIN tb_common_dict AS grp6
			ON
			is_classified = grp6.grp_code AND grp6.grp_id = '6'
		LEFT JOIN users
			ON
			tb_word.username = users.username
    </sql>
    
    <sql id="sqlSelectListConditionApproved">
		<where>
			tb_word.request_status in ('3')
			<if test="requester != null and requester != ''">
				AND (LOWER(tb_word.username) = LOWER(#{requester}) OR LOWER(users.firstname) = LOWER(#{requester}))
			</if>
			<if test="queryContent != null and queryContent != ''">
				<bind name="patternQueryContent" value="'%' + _parameter.queryContent + '%'" />
				AND (LOWER(tb_word.standard_word) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.standard_word_eng) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.abbrevation_eng) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.synonyms) LIKE LOWER(#{patternQueryContent}))
			</if>
			<if test="dateStart != null and dateStart != ''">
				<!--  AND tb_word.created_date <![CDATA[ >= ]]> TO_TIMESTAMP(#{dateStart}, 'YYYY-MM-DD HH24:MI:SS') -->
				AND tb_word.created_date <![CDATA[ >= ]]> STR_TO_DATE(#{dateStart},'%Y-%m-%d %H:%i:%S')
			</if>
			<if test="dateEnd != null and dateEnd != ''">
				<!--  AND tb_word.created_date <![CDATA[ <= ]]> TO_TIMESTAMP(#{dateEnd}, 'YYYY-MM-DD HH24:MI:SS') -->
				AND tb_word.created_date <![CDATA[ <= ]]> STR_TO_DATE(#{dateEnd},'%Y-%m-%d %H:%i:%S')
			</if>
        </where>
    </sql>
    
    <sql id="sqlSelectListConditionApproved2">
		<where>
			<if test="aSelectedRequestId != null">
				tb_word.request_id IN
				<foreach item="item" collection="aSelectedRequestId" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
        </where>
    </sql>
    
    <sql id="sqlSelectListConditionUser">
		<where>
			tb_word.username = #{username}
			<if test="rejectionReason != null and rejectionReason != ''">
				<bind name="patternRejectionReason" value="'%' + _parameter.rejectionReason + '%'" />
				AND tb_word.rejection_reason LIKE #{patternRejectionReason}
			</if>
			<if test="queryContent != null and queryContent != ''">
				<bind name="patternQueryContent" value="'%' + _parameter.queryContent + '%'" />
				AND (LOWER(tb_word.standard_word) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.standard_word_eng) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.abbrevation_eng) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.synonyms) LIKE LOWER(#{patternQueryContent}))
			</if>
			<if test="requestStatus != null">
				AND tb_word.request_status IN
				<foreach item="item" collection="requestStatus" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="dateStart != null and dateStart != ''">
				<!--  AND tb_word.created_date <![CDATA[ >= ]]> TO_TIMESTAMP(#{dateStart}, 'YYYY-MM-DD HH24:MI:SS') -->
				AND tb_word.created_date <![CDATA[ >= ]]> STR_TO_DATE(#{dateStart},'%Y-%m-%d %H:%i:%S')
			</if>
			<if test="dateEnd != null and dateEnd != ''">
				<!--  AND tb_word.created_date <![CDATA[ <= ]]> TO_TIMESTAMP(#{dateEnd}, 'YYYY-MM-DD HH24:MI:SS') -->
				AND tb_word.created_date <![CDATA[ <= ]]> STR_TO_DATE(#{dateEnd},'%Y-%m-%d %H:%i:%S')
			</if>
        </where>
    </sql>
    
    <sql id="sqlSelectListConditionAdmin">
		<where>
			NOT tb_word.request_status in ('1', '5')
			<if test="requester != null and requester != ''">
				AND (LOWER(tb_word.username) = LOWER(#{requester}) OR LOWER(users.firstname) = LOWER(#{requester}))
			</if>
			<if test="rejectionReason != null and rejectionReason != ''">
				<bind name="patternRejectionReason" value="'%' + _parameter.rejectionReason + '%'" />
				AND tb_word.rejection_reason LIKE #{patternRejectionReason}
			</if>
			<if test="queryContent != null and queryContent != ''">
				<bind name="patternQueryContent" value="'%' + _parameter.queryContent + '%'" />
				AND (LOWER(tb_word.standard_word) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.standard_word_eng) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.abbrevation_eng) LIKE LOWER(#{patternQueryContent}) 
				OR LOWER(tb_word.synonyms) LIKE LOWER(#{patternQueryContent}))
			</if>
			<if test="requestStatus != null">
				AND tb_word.request_status IN
				<foreach item="item" collection="requestStatus" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="dateStart != null and dateStart != ''">
				<!--  AND tb_word.created_date <![CDATA[ >= ]]> TO_TIMESTAMP(#{dateStart}, 'YYYY-MM-DD HH24:MI:SS') -->
				AND tb_word.created_date <![CDATA[ >= ]]> STR_TO_DATE(#{dateStart},'%Y-%m-%d %H:%i:%S')
			</if>
			<if test="dateEnd != null and dateEnd != ''">
				<!--  AND tb_word.created_date <![CDATA[ <= ]]> TO_TIMESTAMP(#{dateEnd}, 'YYYY-MM-DD HH24:MI:SS') -->
				AND tb_word.created_date <![CDATA[ <= ]]> STR_TO_DATE(#{dateEnd},'%Y-%m-%d %H:%i:%S')
			</if>
        </where>
    </sql>
    
    <sql id="sqlSelectListOrderBy">
        ORDER BY
			${orderby} ${ordertype}
		LIMIT #{limit} OFFSET #{offset}
    </sql>
    
    <sql id="sqlSelectListOrderByApproved2">
        ORDER BY
			request_id DESC
    </sql>
    
    <select id="searchWord" parameterType="map" resultType="lg.cns.ds.domain.Word">
   		SELECT
   			request_id as requestId
			, request_type as requestType
			, request_status as requestStatus
			, regist_status as registStatus
			, is_normal as isNormal
			, tb_word.username as username
			, created_date as createdDate
			, approved_date as approveDate
			, standard_word as standardWord
			, standard_word_eng as standardWordEng
			, abbrevation_eng as abbrevationEng
			, synonyms as synonyms
			, is_classified as isClassified
			, source as source
			, definition as definition
			, rejection_reason as rejectionReason
		FROM tb_word
		WHERE
			standard_word = #{word}
			AND
			request_status IN ('3')
		LIMIT 1 OFFSET 0
	</select>
	
	<select id="selectCountApproved" parameterType="map" resultType="java.lang.Integer">
   		SELECT COUNT(request_id)
		FROM tb_word
		LEFT JOIN users
			ON
			tb_word.username = users.username
		<include refid="sqlSelectListConditionApproved" />
	</select>
	
	
	<select id="searchWordCount" parameterType="map" resultType="java.lang.Integer">
   		SELECT COUNT(request_id)
		FROM tb_word
		WHERE
			tb_word.request_status in ('1', '2', '3')
			<if test="word != null and word != '' or abbrevationEng != null and abbrevationEng != ''">
				AND
				(
				<if test="word != null and word != ''">
					standard_word = #{word}
				</if>
				<if test="word != null and word != '' and abbrevationEng != null and abbrevationEng != ''">
					OR
				</if>
				<if test="abbrevationEng != null and abbrevationEng != ''">
					abbrevation_eng = #{abbrevationEng}
				</if>
				)
			</if>
			<if test="requestId != null and requestId != ''">
				AND NOT tb_word.request_id = #{requestId}
			</if>
	</select>

	<select id="selectCount" parameterType="map" resultType="java.lang.Integer">
   		SELECT COUNT(request_id)
		FROM tb_word
		<include refid="sqlSelectListConditionUser" />
	</select>
	
	<select id="selectCountAdmin" parameterType="map" resultType="java.lang.Integer">
   		SELECT COUNT(request_id)
		FROM tb_word
		LEFT JOIN users
			ON
			tb_word.username = users.username
		<include refid="sqlSelectListConditionAdmin" />
	</select>
	
	<select id="selectListApproved" parameterType="map" resultType="lg.cns.ds.domain.Word">
		<include refid="sqlSelectList" />
		<include refid="sqlSelectListConditionApproved" />
		<include refid="sqlSelectListOrderBy" />
	</select>
	
	<select id="selectListApproved2" parameterType="map" resultType="lg.cns.ds.domain.Word">
		<include refid="sqlSelectList" />
		<include refid="sqlSelectListConditionApproved2" />
		<include refid="sqlSelectListOrderByApproved2" />
	</select>

	<select id="selectList" parameterType="map" resultType="lg.cns.ds.domain.Word">
		<include refid="sqlSelectList" />
		<include refid="sqlSelectListConditionUser" />
		<include refid="sqlSelectListOrderBy" />
	</select>
	
	<select id="selectListAdmin" parameterType="map" resultType="lg.cns.ds.domain.Word">
		<include refid="sqlSelectList" />
		<include refid="sqlSelectListConditionAdmin" />
		<include refid="sqlSelectListOrderBy" />
	</select>
	
	<insert id="insert" parameterType="lg.cns.ds.domain.Word" useGeneratedKeys="true" keyProperty="requestId" keyColumn="request_id">		
		INSERT INTO tb_word
			(request_type, request_status, regist_status, is_normal, username, created_date, approved_date, standard_word, standard_word_eng, abbrevation_eng, synonyms, is_classified, source, definition)
		VALUES
			(#{requestType}, #{requestStatus}, #{registStatus}, #{isNormal}, #{username}, now(), null, #{standardWord}, #{standardWordEng}, #{abbrevationEng}, #{synonyms}, #{isClassified}, #{source}, #{definition})
	</insert>
	
	<update id="update" parameterType="lg.cns.ds.domain.Word">
		UPDATE tb_word SET
			standard_word = #{standardWord}
			, standard_word_eng = #{standardWordEng}
			, abbrevation_eng = #{abbrevationEng}
			, synonyms = #{synonyms}
			, is_classified = #{isClassified}
			, source = #{source}
			, definition = #{definition}
			, is_normal = #{isNormal}
			, regist_status = CASE WHEN request_status = '4' THEN '2' ELSE '1' END
		WHERE
			request_id = #{requestId}
			AND
			username = #{username}
	</update>
	
	<update id="updateRejectionReason" parameterType="lg.cns.ds.domain.Word">
		UPDATE tb_word SET
			rejection_reason = #{rejectionReason}
		WHERE
			request_id = #{requestId}
			AND
			request_status in ('4', '2')
	</update>
	
	<update id="makeRequest" parameterType="java.util.HashMap">		
		UPDATE tb_word SET
			request_status = '2',
			created_date = now()
		WHERE
			request_id IN
			<foreach item="item" collection="aSelectedRequestId" open="(" separator="," close=")">
				#{item}
			</foreach>
			AND
			username = #{username}
			AND
			request_status in ('1', '4')
	</update>
	
	<update id="cancelRequest" parameterType="java.util.HashMap">		
		UPDATE tb_word SET
			request_status = '5'
		WHERE
			request_id IN
			<foreach item="item" collection="aSelectedRequestId" open="(" separator="," close=")">
				#{item}
			</foreach>
			AND
			username = #{username}
			AND
			(request_status in ('1', '2', '4') OR request_status IS NULL)
	</update>
	
	<delete id="deleteRequest" parameterType="java.util.HashMap">		
		DELETE FROM tb_word
		WHERE
			request_id IN
			<foreach item="item" collection="aSelectedRequestId" open="(" separator="," close=")">
				#{item}
			</foreach>
			AND
			username = #{username}
			AND
			(request_status in ('1', '2', '4') OR request_status IS NULL)
	</delete>
	
	<update id="approveRequest" parameterType="java.util.HashMap">		
		UPDATE tb_word SET
			request_status = '3'
		WHERE
			request_id IN
			<foreach item="item" collection="aSelectedRequestId" open="(" separator="," close=")">
				#{item}
			</foreach>
			AND
			request_status = '2'
	</update>
	
	<update id="rejectRequest" parameterType="java.util.HashMap">		
		UPDATE tb_word SET
			request_status = '4'
		WHERE
			request_id IN
			<foreach item="item" collection="aSelectedRequestId" open="(" separator="," close=")">
				#{item}
			</foreach>
			AND
			request_status = '2'
	</update>
	
</mapper>